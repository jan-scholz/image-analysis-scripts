#! /bin/bash
# transfer files and set up registration directory
#
# jan.scholz@mouseimaging.ca, MICe, Toronto, Canada
#
#micetransfer -v -c basket_default.cfg -r scinet:/home/j/jlerch/jscholz/scratch/tmp/scinettrans -o foo images/*mnc

usage ()
{
	echo "Usage: $(basename $0) -r REMOTEPATH -o REGDIR FILES.."
	echo "  -r REMOTEPATH   remotepath, e.g. scinet:/home/j/jlerch/user/scratch/"
	echo "  -o REGDIR       put everyting in here"
	echo "  -c COMMANDSFILE  specify command and resources (will be linked locally and copied remotely)"
	echo
	echo "  -n NMASKPARTS   split mask in so many files"
	echo "  FILES           minc files to register"
}


[ -z "$TMPDIR" ] && { echo "ERROR: \$TMPDIR not set"; exit 1; }
[ $# -lt 2 ] && { usage; exit 1; }

while getopts r:o:c:n:v opt
do
	case "$opt" in
		r)  REMOTEPATH="$OPTARG";;
		o)  REGDIR="$OPTARG";;
		c)  COMMANDSFILE="$OPTARG";;
		n)  NMASKPARTS="$OPTARG";;
		v)  VERBOSE="-v";;
		\?)  usage; exit 1;;
	esac
done
shift $(expr $OPTIND - 1)

###############################################################################
# setup directories and files

mkdir -p $REGDIR/{input,resources} || { echo "ERROR: couldn't create REGDIR: $REGDIR"; exit 1; }


[ -z "$VERBOSE" ] || echo "copying files to $REGDIR/input"
for f in $@; do
	[ -e "$f" ] || { echo "ERROR: file does not exist: $f"; exit 1; }
	ln $VERBOSE -sf `readlink -e $f` $REGDIR/input/
done

###############################################################################
# scripts

cat > $REGDIR/trans2remote.sh << EOF
rsync -auvL \$@ `readlink -e $REGDIR`/ $REMOTEPATH/$REGDIR/
EOF
chmod +x $REGDIR/trans2remote.sh

cat > $REGDIR/trans2local.sh << EOF
rsync -auvK \$@ $REMOTEPATH/$REGDIR/ `readlink -e $REGDIR`/
EOF
chmod +x $REGDIR/trans2local.sh

###############################################################################
# setup scinet fifo and dispatcher

REGNAME=`basename $REGDIR`-`date +"%Y-%m-%d"`

# create pipeline setup script

cat > $REGDIR/setup_dispatcher.sh << EOF
# create screen if not exists
screen -list | awk '{print \$1}' | grep -q "$REGNAME" || screen -dmS $REGNAME

JOBDIR=\$(dirname \$(readlink -e \$0))/jobdir
mkdir -p \$JOBDIR

screen -S $REGNAME -p 0 -X stuff "JOBDIR=\$JOBDIR"
screen -S $REGNAME -p 0 -X stuff "FIFO=\$JOBDIR/fifo1"
#screen -S $REGNAME -p 0 -X stuff "scinet_dispatcher.py -p \\\$FIFO -d \\\$JOBDIR -t 180"
screen -S $REGNAME -p 0 -X stuff "cd \\\$JOBDIR; scinet_dispatcher.py -p \\\$FIFO -d \\\$JOBDIR -t 180"

# create new window
screen -S $REGNAME -X screen

# paste command
screen -S $REGNAME -p 1 -X stuff "echo optionally start quarantine before"
screen -S $REGNAME -p 1 -X stuff "./run_mbm.sh"

echo "to reattach run on \$HOSTNAME: screen -S $REGNAME -r"
#echo "now run:"
#echo "screen -S $REGNAME -p 0 -X stuff 'runpipeline"
EOF
chmod +x $REGDIR/setup_dispatcher.sh

###############################################################################
# read in build model config and link resources locally and transfer remotely
TMPBASE=$TMPDIR/$$
TMPMBMCMD=${TMPBASE}_mbm.txt

echo 'BASE=$(dirname $(readlink -e $0));' >> $TMPMBMCMD
echo 'FIFO=$BASE/jobdir/fifo1;' >> $TMPMBMCMD
echo 'cd $BASE/jobdir;' >> $TMPMBMCMD

if [ ! -z "$COMMANDSFILE" ]; then
	[ -f "$COMMANDSFILE" ] || { echo "ERROR: could not find COMMANDSFILE: $COMMANDSFILE"; exit 1; }
	grep -v '#' $COMMANDSFILE | while read LINE; do
		if echo $LINE | grep -q -e '^ *@'; then
			TMP=($LINE)
			ln $VERBOSE -sf ${TMP[1]%/native} $REGDIR/resources/
			[ "${TMP[0]/@}" = "" ] || echo ${TMP[0]/@} \$BASE/resources/`basename ${TMP[1]%/native}``echo ${TMP[1]} | grep -e '/native$' -o` >> $TMPMBMCMD
		else
			echo ${LINE#@} >> $TMPMBMCMD
		fi
	done

	(cd $REGDIR; ls input/*mnc; ) > ${TMPBASE}_input.txt
	sed -i -e 's+^+\$BASE/+' ${TMPBASE}_input.txt

	MBMCMD=$REGDIR/run_mbm.sh
	cat $TMPMBMCMD ${TMPBASE}_input.txt > $MBMCMD
	sed -i -e ':a;N;$!ba;s/\n/ /g' $MBMCMD
	sed -i -e 's/; /\n/g' $MBMCMD
	chmod +x $REGDIR/run_mbm.sh

	rm ${TMPBASE}_mbm.txt ${TMPBASE}_input.txt
fi


###############################################################################
# clean up scripts

cat > $REGDIR/cleanup.sh << EOF
tar --remove-files -czvf jobdir.tar.gz jobdir
EOF
chmod +x $REGDIR/cleanup.sh



exit 0


#
#
#	echo "  -t TABLE        csv file"
#	echo "  -m MASK         mask file"
#[ -f "$TABLE" ] || { echo "ERROR: could not find table: $TABLE"; exit 1; }
#[ -f "$MASK" ] || { echo "ERROR: could not find mask: $MASK"; exit 1; }
#rsync $VERBOSE -au $@ $REGDIR/input/ || { echo "ERROR: transfer to $REGDIR/input failed"; exit 1; }
#		t)  TABLE="$OPTARG";;
#		m)  MASK="$OPTARG";;

# run multiple commands: screen -dmS session_name sh -c 'script.sh; exec bash'
# time out after 180 sec
#screen -list | awk '{print \$1}' | grep -q "$REGNAME" && { echo "ERROR: screen already exists: $REGNAME"; exit 1; }
# scinet_dispatcher.py -p \$FIFO -d \$JOBDIR -t 180

